import {useEffect, useState} from "react";import {useSelector} from "react-redux";import {usersArrType} from "../../types/usersType";export const useLikes = (stateLike: boolean, idCard?: number) => {    const arrCards = useSelector<any, usersArrType>(state => state.usersReducer.users)    const newArrCards = useSelector<any, usersArrType>(state => state.addedUsersReducer.users)    const [outState, setOutState] = useState<Array<{ id: number, isLike: boolean }>>([])    useEffect(() => {        if (localStorage.likes === undefined) {            localStorage.likes = JSON.stringify([])        } else if (JSON.parse(localStorage?.likes).length < arrCards.length) {            localStorage.likes = JSON.stringify([...JSON.parse(localStorage.likes), ...newArrCards.map(value => {                return {                    id: value.id,                    isLike: false,                }            })])        } else {            let arr = JSON.parse(localStorage.likes)            arr.forEach((v: { id: number; isLike: boolean }) => {                if (v.id === idCard) {                   v.isLike = !v.isLike                } else {                    return {                        id: idCard,                        isLike: v.isLike                    }                }            } )            localStorage.likes = JSON.stringify(arr)            setOutState(arr)        }    }, [arrCards, newArrCards, idCard, stateLike])    return outState}